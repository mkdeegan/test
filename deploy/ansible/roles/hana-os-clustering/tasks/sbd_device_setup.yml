---

- name: Ensure iscsid, iscsi, sbd services are enabled
  service: name={{ item }} enabled=yes
  loop:
    - iscsid
    - iscsi
    - sbd

- name: Ensure initiator name is set
  vars:
    currentHostName: "{{ primary_instance.name if inventory_hostname == primary_instance.ip_admin else secondary_instance.name }}"
    initiatorName: "{{ iscsi_object }}.{{ currentHostName }}.local:{{ currentHostName }}"
  lineinfile:
    dest: '/etc/iscsi/initiatorname.iscsi'
    regexp: '^InitiatorName=iqn'
    line: InitiatorName={{ initiatorName }}
    state: 'present'

- name: Ensure iscsid, iscsi are restarted
  service: name={{ item }} state=restarted
  loop:
    - iscsid
    - iscsi

# Connect the iSCSI devices
- name: Discover targets on portals, set connecting, mark targets to auto start
  shell: |
    iscsiadm -m discovery --type=st --portal={{ item }}:{{ iscsi_port }}
    iscsiadm -m node -T {{ target }} --login --portal={{ item }}:{{ iscsi_port }}
    iscsiadm -m node -p {{ item }}:{{ iscsi_port }} --op=update --name=node.startup --value=automatic
  loop: "{{ groups['iscsi'] }}"
  register: login_iscsi_device

- name: Call lsscsi and get devices names
  shell: lsscsi -l | grep {{ storage_object }} | awk '{ print $6; }' | grep -oP "^/dev/\K.*"
  register: iscsi_devices_names

- name: Check if iSCSI device(s) is able to be discovered
  assert:
    that: iscsi_devices_names.stdout_lines | length > 0
    fail_msg: "No iSCSI device is discovered"
    success_msg: "There are {{ iscsi_devices_names.stdout_lines | length }} iSCSI devices discovered"

- name: Get disk with correct disk-id
  shell: ls -l /dev/disk/by-id/scsi-* | grep {{ item }} | grep scsi-3 | awk '{ print $9; }'
  loop: "{{ iscsi_devices_names.stdout_lines }}"
  register: iscsi_devices_ids

- name: Check if iSCSI device(s) ID is able to be fetched
  assert:
    that: iscsi_devices_ids.results | length > 0
    fail_msg: "Not able to get iSCSI devices ID(s)"
    success_msg: "There are {{ iscsi_devices_ids.results | length }} iSCSI devices ID fetched"

- name: Get SBD devices list
  set_fact:
    sbd_devices: "{{ item.stdout }};{{ sbd_devices | default('') }}"
  loop: "{{ iscsi_devices_ids.results }}"

- name: Ensure SBD device is created on the first cluster node
  when: inventory_hostname == primary_instance.ip_admin
  command: sbd -d {{ item.stdout }} -1 60 -4 120 create
  loop: "{{ iscsi_devices_ids.results }}"

- name: Ensure the SBD config has device ids
  lineinfile:
    dest: '/etc/sysconfig/sbd'
    regexp: 'SBD_DEVICE='
    line: "SBD_DEVICE=\"{{ sbd_devices }}\""
    state: 'present'

- name: Ensure the SBD config to have pacemaker enabled
  lineinfile:
    dest: '/etc/sysconfig/sbd'
    regexp: 'SBD_PACEMAKER='
    line: "SBD_PACEMAKER=yes"
    state: 'present'

- name: Ensure the SBD config has SDB startmode set to always
  lineinfile:
    dest: '/etc/sysconfig/sbd'
    regexp: 'SBD_STARTMODE='
    line: "SBD_STARTMODE=always"
    state: 'present'

- name: Ensure softdog config is created
  shell: echo softdog | sudo tee /etc/modules-load.d/softdog.conf

- name: Load the softdog module
  shell: modprobe -v softdog
